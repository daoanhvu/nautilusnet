import glob
import pandas as pd
import xml.etree.ElementTree as ET
from tqdm import tqdm
import tensorflow as tf
from PIL import Image
import os
import csv
import io
import dataset_utils

# Preferences:
#    https://tensorflow-object-detection-api-tutorial.readthedocs.io/en/latest/training.html
#

def __list_to_csv(annotations, output_file):
    column_name = ['filename', 'img_width', 'img_height', 'channels', 'class', 'xmin', 'ymin', 'xmax', 'ymax']
    xml_df = pd.DataFrame(annotations, columns=column_name)
    xml_df.to_csv(output_file, index=None)

def xml_to_csv(xml_dir, output_file):
    """Reads all XML files, generated by labelImg, from a directory and generates a single CSV file"""
    annotations = []
    for xml_file in tqdm(glob.glob(xml_dir + '/*.xml')):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        file_path = root.find('path').text
        img_size = root.find('size')
        image_height = int(img_size.find('height').text)
        image_width = int(img_size.find('width').text)
        image_channels = int(img_size.find('depth').text)
        for member in root.findall('object'):
            value = (file_path,
                  image_width, image_height, image_channels,
                  member[0].text,
                  int(member[4][0].text),
                  int(member[4][1].text),
                  int(member[4][2].text),
                  int(member[4][3].text))
            annotations.append(value)

    __list_to_csv(annotations, output_file)

def load_classes(class_file):
    with open(class_file) as csv_file:
        class_reader = csv.reader(csv_file, delimiter=',')
        classes = {row[1]: row[0] for row in class_reader}
        return classes

def create_tf_example(xml_dir):
    examples = []
    class_map = load_classes(xml_dir + '/classes.csv')
    for xml_file in tqdm(glob.glob(xml_dir + '/*.xml')):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        file_path = root.find('path').text
        img_size = root.find('size')
        image_height = int(img_size.find('height').text)
        image_width = int(img_size.find('width').text)
        image_channels = int(img_size.find('depth').text)
        image_format = file_path.split('.')[-1].encode()
        with tf.io.gfile.GFile(file_path, "rb") as fid:
            encoded_image = fid.read()
        encoded_path = file_path.encode()
        for member in root.findall('object'):
            value = (file_path,
                  image_width, image_height, image_channels,
                  member[0].text,
                  int(member[4][0].text),
                  int(member[4][1].text),
                  int(member[4][2].text),
                  int(member[4][3].text))
            xmins = [float(member[4][0].text) / float(image_width)]
            xmaxs = [float(member[4][2].text) / float(image_width)] # List of normalized right x coordinates in bounding box
             # (1 per box)
            ymins = [float(member[4][1].text) / float(image_height)] # List of normalized top y coordinates in bounding box (1 per box)
            ymaxs = [float(member[4][3].text) / float(image_height)] # List of normalized bottom y coordinates in bounding box
             # (1 per box)
            classes_text = [member[0].text.encode()] # List of string class name of bounding box (1 per box)
            classes = [int(class_map[member[0].text])] # List of integer class id of bounding box (1 per box)

            tf_example = tf.train.Example(features=tf.train.Features(feature={
                'image/height': dataset_utils.int64_feature(image_height),
                'image/width': dataset_utils.int64_feature(image_width),
                'image/filename': dataset_utils.bytes_feature(encoded_path),
                'image/source_id': dataset_utils.bytes_feature(encoded_path),
                'image/encoded': dataset_utils.bytes_feature(encoded_image),
                'image/format': dataset_utils.bytes_feature(image_format),
                'image/object/bbox/xmin': dataset_utils.float_list_feature(xmins),
                'image/object/bbox/xmax': dataset_utils.float_list_feature(xmaxs),
                'image/object/bbox/ymin': dataset_utils.float_list_feature(ymins),
                'image/object/bbox/ymax': dataset_utils.float_list_feature(ymaxs),
                'image/object/class/text': dataset_utils.bytes_list_feature(classes_text),
                'image/object/class/label': dataset_utils.int64_list_feature(classes),
            }))
            examples.append(tf_example)
    return examples
